//
//  main.swift
//  flynnlint
//
//  Created by Rocco Bowling on 5/29/20.
//  Copyright Â© 2020 Rocco Bowling. All rights reserved.
//

import Foundation
import Flynn

class InputFiles: Actor, Flowable {
    // input: path to text file where each iput file in on a line
    // output: paths to individual swift files
    var safeFlowable = FlowableState()
    
    var filesProcessed:[String:Bool] = [:]

    private func _beFlow(_ args: FlowableArgs) {
        if args.isEmpty { return self.safeFlowToNextTarget(args) }

        let output: String = args[x:0]
        let input: String = args[x:1]
                
        guard let inputsFileString = try? String(contentsOf: URL(fileURLWithPath: input)) else {
            fatalError("unable to open inputs file \(input)")
        }
        
        let inputFiles = inputsFileString.split(separator: "\n")
        
        for inputFile in inputFiles {
            let inputFileString = String(inputFile)
            if filesProcessed[inputFileString] == nil {
                filesProcessed[inputFileString] = true
                self.safeFlowToNextTarget([output, inputFileString])
            }
        }
    }

}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension InputFiles {

    @discardableResult
    public func beFlow(_ args: FlowableArgs) -> Self {
        unsafeSend { self._beFlow(args) }
        return self
    }

}
