//
//  main.swift
//  flynnlint
//
//  Created by Rocco Bowling on 5/29/20.
//  Copyright Â© 2020 Rocco Bowling. All rights reserved.
//

import Foundation
import SourceKittenFramework
import Flynn

class ParseFile: Actor, Flowable {
    // input: path to source directory, path to swift file
    // output: SourceKitten File, SourceKitten Structure
    var safeFlowable = FlowableState()
    
    private func _beFlow(_ args: FlowableArgs) {
        if args.isEmpty { return self.safeFlowToNextTarget(args) }

        let output: String = args[x:0]
        let filePath: String = args[x:1]
        
        if let file = File(path: filePath) {
            do {
                let syntax = try StructureAndSyntax(file: file)

                var blacklist: [String] = []
                for rule in Ruleset().all {
                    if !rule.precheck(file) {
                        blacklist.append(rule.description.identifier)
                    }
                }

                let fileSyntax = FileSyntax(output,
                                            file,
                                            syntax.structure,
                                            [],
                                            syntax.syntax,
                                            blacklist)

                self.safeFlowToNextTarget([fileSyntax])
            } catch {
                print("Parsing error: \(error)")
            }
        }
    }

}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension ParseFile {

    @discardableResult
    public func beFlow(_ args: FlowableArgs) -> Self {
        unsafeSend { self._beFlow(args) }
        return self
    }

}
