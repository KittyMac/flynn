//
//  FlynnPluginTests.swift
//  FlynnPluginTests
//
//  Created by Rocco Bowling on 5/31/20.
//  Copyright Â© 2020 Rocco Bowling. All rights reserved.
//

import XCTest
@testable import FlynnPluginFramework

class FlynnPluginTests: XCTestCase {
    var output = "/tmp/FlynnPlugin"
    var packageRoot = ""
    
    override func setUpWithError() throws {
        packageRoot = #file.replacingOccurrences(of: "/Tests/FlynnPluginFrameworkTests/FlynnPluginFrameworkTests.swift", with: "")
    }

    override func tearDownWithError() throws { }
    
    func testExample() throws {
        let flynnplugin = FlynnPluginTool()
        flynnplugin.process(input: "/Users/rjbowli/Development/chimerasw/Flynn/Examples/HelloWorld/Sources/HelloWorld/main.swift",
                            output: "/tmp/FlynnPlugin.swift")
    }
    
    func testFlynn() throws {
        
        let flynnplugin = FlynnPluginTool()
        
        let files = [
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Flowable.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Flynn+Timer.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Atomics.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Flynn.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Extensions.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Queue.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Actor.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Remote/Flynn+Remote.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Remote/RemoteActorManager.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Remote/RemoteActorRunner.swift",
            "/Users/rjbowli/Development/chimerasw/Flynn/Sources/Flynn/Remote/RemoteActor.swift"
        ]
        
        flynnplugin.process(inputs: files,
                            output: "/tmp/FlynnPlugin.swift")
        
        
    }
    
    func testFlynn2() throws {
        let flynnplugin = FlynnPluginTool()
        flynnplugin.process(input: "/Users/rjbowli/Library/Developer/Xcode/DerivedData/Flynn-atlbddvexwtcxmbjhpgyyonyzrrj/SourcePackages/flynn/FlynnTests/FlynnPlugin/inputFiles.txt",
                            output: "/tmp/FlynnPlugin.swift")
    }
    
    func testFlynn3() throws {
        let flynnplugin = FlynnPluginTool()
        flynnplugin.process(input: "/Users/rjbowli/Development/chimerasw/Picaroon/.build/plugins/outputs/picaroon/Picaroon/FlynnPlugin/inputFiles.txt",
                            output: "/tmp/FlynnPlugin.swift")
    }
    
    func testFlynn4() throws {
        let flynnplugin = FlynnPluginTool()
        flynnplugin.process(input: "/Users/rjbowli/Development/smallplanet/npd_ReceiptPal_iOS/receiptpal_amazon/swift/ErrorLogServer/.build/plugins/outputs/errorlogserver/ErrorLogServerFramework/FlynnPlugin/inputFiles.txt",
                            output: "/tmp/FlynnPlugin.swift")
    }
/*
    func testOneRuleOneCode() throws {
        let rule = PrivateFunctionInActorRule()
        XCTAssert(rule.test("""
            class TestActor: Actor {
                private var string: String = ""

                interal func _bePrint() {
                    print("Hello world")
                }
            }
        """))
    }
    
    func testAllRulesOneCode() throws {
        let code = """
            class TestActor: Actor {
                private var string: String = ""

                interal func _bePrint() {
                    print("Hello world")
                }
            }
        """
        let rules = Ruleset()
        for rule in rules.all {
            XCTAssert(rule.test(code))
        }
    }

    func testOneRule() throws {
        let rule = RemoveAutogeneratedBehavioursRule()
        XCTAssert(rule.test())
    }

    func testAllRules() throws {
        let rules = Ruleset()
        for rule in rules.all {
            XCTAssert(rule.test())
        }
    }*/

    static var allTests = [
        ("testFlynn", testFlynn),
        /*
        ("testOneRuleOneCode", testOneRuleOneCode),
        ("testAllRulesOneCode", testAllRulesOneCode),
        ("testOneRule", testOneRule),
        ("testAllRules", testAllRules),
         */
    ]
}
