import XCTest
@testable import Flynn

typealias ColorCallback = ([Float]) -> Void

public class ColorableState {
    fileprivate var color: [Float] = [1, 1, 1, 1]
}

protocol Colorable: Actor {
    var safeColorable: ColorableState { get set }
}

extension Colorable {
    private func _beColor() {
        print("Colorable.color from \(self)")
    }

    private func _beAlpha() {
        print("Colorable.alpha from \(self)")
    }

    private func _beGetColor(_ callback: @escaping ([Float]) -> Void) {
        callback(self.safeColorable.color)
    }

    private func _beGetColor2(_ callback: @escaping ColorCallback) {
        callback(self.safeColorable.color)
    }

    private func _beSetColor(_ color: [Float]) {
        self.safeColorable.color = color
    }
}

public final class Color: Actor, Colorable, Viewable {
    public var safeColorable = ColorableState()
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Colorable {

    @discardableResult
    public func beColor() -> Self {
        unsafeSend(_beColor)
        return self
    }
    @discardableResult
    public func beAlpha() -> Self {
        unsafeSend(_beAlpha)
        return self
    }
    @discardableResult
    public func beGetColor(_ callback: @escaping ([Float]) -> Void) -> Self {
        unsafeSend { self._beGetColor(callback) }
        return self
    }
    @discardableResult
    public func beGetColor2(_ callback: @escaping ColorCallback) -> Self {
        unsafeSend { self._beGetColor2(callback) }
        return self
    }
    @discardableResult
    public func beSetColor(_ color: [Float]) -> Self {
        unsafeSend { self._beSetColor(color) }
        return self
    }

}
