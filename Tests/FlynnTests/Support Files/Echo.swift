
import XCTest
@testable import Flynn

class Echo: RemoteActor {
    private var count: Int = 0
    
    private func _bePrintThreadName() -> Data {
        if let name = Thread.current.name {
            print("Echo running on \(name)")
        }
        return Data()
    }
    
    private func _bePrint(_ string: String) {
        print("on slave: '\(string)'")
    }
    
    private func _beToLower(_ string: String) -> Data {
        count += 1
        if let data = ("\(string) [\(count)]").lowercased().data(using:.utf8) {
            return data
        }
        return Data()
    }
}



// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Echo {

    struct BePrintCodable: Codable {
        let arg0: String
    }
    struct BeToLowerCodable: Codable {
        let arg0: String
    }

    @discardableResult
    public func bePrintThreadName(_ sender: Actor, _ callback: @escaping RemoteBehaviorReply) -> Self {
        unsafeSendToRemote("Echo", "bePrintThreadName", Data(), sender, callback)
        return self
    }
    @discardableResult
    public func bePrint(_ string: String ) -> Self {
        let msg = BePrintCodable(arg0: string)
        if let data = try? JSONEncoder().encode(msg) {
            unsafeSendToRemote("Echo", "bePrint", data, nil, nil)
        } else {
            fatalError()
        }
        return self
    }
    @discardableResult
    public func beToLower(_ string: String,
                          _ sender: Actor,
                          _ callback: @escaping RemoteBehaviorReply ) -> Self {
        let msg = BeToLowerCodable(arg0: string)
        if let data = try? JSONEncoder().encode(msg) {
            unsafeSendToRemote("Echo", "beToLower", data, sender, callback)
        } else {
            fatalError()
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("bePrintThreadName") { [unowned self] (data) in
            return self._bePrintThreadName()
        }
        safeRegisterRemoteBehavior("bePrint") { [unowned self] (data) in
            if let msg = try? JSONDecoder().decode(BePrintCodable.self, from: data) {
                self._bePrint(msg.arg0)
            }
            return nil
        }
        safeRegisterRemoteBehavior("beToLower") { [unowned self] (data) in
            if let msg = try? JSONDecoder().decode(BeToLowerCodable.self, from: data) {
                return self._beToLower(msg.arg0)
            }
            return nil
        }
    }
}
