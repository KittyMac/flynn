import XCTest
@testable import Flynn

class Echo: RemoteActor {
    private let echoUUID = UUID().uuidString
    private var count: Int = 999

    override func safeInit() {
        count = 0
    }

    private func _bePrintThreadName() -> Int {
        if let name = Thread.current.name {
            sleep(1)
            print("Echo running on \(name)")
        }
        return 0
    }

    private func _bePrint(_ string: String) {
        print("on node: '\(string)'")
    }

    private func _beToLower(_ string: String) -> String {
        count += 1
        return "\(string) [\(count)]".lowercased()
    }

    private func _beTestDelayedReturn(_ string: String, _ returnCallback: @escaping (String) -> Void) {
        Flynn.Timer(timeInterval: Double.random(in: 0..<3), repeats: false, safeActor) { (_) in
            returnCallback(string.uppercased())
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Echo {

    struct BePrintThreadNameCodableResponse: Codable {
        let response: Int
    }
    struct BePrintCodableRequest: Codable {
        let arg0: String
    }
    struct BeToLowerCodableResponse: Codable {
        let response: String
    }
    struct BeToLowerCodableRequest: Codable {
        let arg0: String
    }
    struct BeTestDelayedReturnCodableResponse: Codable {
        let response: String
    }
    struct BeTestDelayedReturnCodableRequest: Codable {
        let arg0: String
    }

    @discardableResult
    public func bePrintThreadName(_ sender: Actor, _ callback: @escaping (Int) -> Void) -> Self {
        unsafeSendToRemote("Echo", "bePrintThreadName", Data(), sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! JSONDecoder().decode(BePrintThreadNameCodableResponse.self, from: $0)).response
            )
        }
        return self
    }
    @discardableResult
    public func bePrint(_ string: String ) -> Self {
        let msg = BePrintCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! JSONEncoder().encode(msg)
        unsafeSendToRemote("Echo", "bePrint", data, nil, nil)
        return self
    }
    @discardableResult
    public func beToLower(_ string: String,
                          _ sender: Actor,
                          _ callback: @escaping (String) -> Void ) -> Self {
        let msg = BeToLowerCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! JSONEncoder().encode(msg)
        unsafeSendToRemote("Echo", "beToLower", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! JSONDecoder().decode(BeToLowerCodableResponse.self, from: $0).response)
            )
        }
        return self
    }
    @discardableResult
    public func beTestDelayedReturn(_ string: String,
                                    _ sender: Actor,
                                    _ callback: @escaping (String) -> Void ) -> Self {
        let msg = BeTestDelayedReturnCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! JSONEncoder().encode(msg)
        unsafeSendToRemote("Echo", "beTestDelayedReturn", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! JSONDecoder().decode(BeTestDelayedReturnCodableResponse.self, from: $0).response)
            )
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("bePrintThreadName") { [unowned self] (_) in
            // swiftlint:disable:next force_try
            return try! JSONEncoder().encode(
                BePrintThreadNameCodableResponse(response: self._bePrintThreadName()))
        }
        safeRegisterRemoteBehavior("bePrint") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! JSONDecoder().decode(BePrintCodableRequest.self, from: data)
            self._bePrint(msg.arg0)
            return nil
        }
        safeRegisterRemoteBehavior("beToLower") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! JSONDecoder().decode(BeToLowerCodableRequest.self, from: data)
            let response = self._beToLower(msg.arg0)
            let boxedResponse = BeToLowerCodableResponse(response: response)
            // swiftlint:disable:next force_try
            return try! JSONEncoder().encode(boxedResponse)
        }
        safeRegisterDelayedRemoteBehavior("beTestDelayedReturn") { [unowned self] (data, callback) in
            // swiftlint:disable:next force_try
            let msg = try! JSONDecoder().decode(BeTestDelayedReturnCodableRequest.self, from: data)
            self._beTestDelayedReturn(msg.arg0) { (returnValue: String) in
                callback(
                    // swiftlint:disable:next force_try
                    try! JSONEncoder().encode(
                        BeTestDelayedReturnCodableResponse(response: returnValue))
                )
            }
        }
    }
}
