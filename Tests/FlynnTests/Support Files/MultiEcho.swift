import XCTest
@testable import Flynn

class MultiEchoA: RemoteActor {
    private func _beEcho(_ string: String) -> String {
        return "[A] " + string
    }
}

class MultiEchoB: RemoteActor {
    private func _beEcho(_ string: String) -> String {
        return "[B] " + string
    }
}

class MultiEchoC: RemoteActor {
    private func _beEcho(_ string: String) -> String {
        return "[C] " + string
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension MultiEchoC {

    struct BeEchoCodableResponse: Codable {
        let response: String
    }
    struct BeEchoCodableRequest: Codable {
        let arg0: String
    }

    @discardableResult
    public func beEcho(_ string: String,
                       _ sender: Actor,
                       _ callback: @escaping (String) -> Void ) -> Self {
        let msg = BeEchoCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! JSONEncoder().encode(msg)
        unsafeSendToRemote("MultiEchoC", "beEcho", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! JSONDecoder().decode(BeEchoCodableResponse.self, from: $0).response)
            )
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("beEcho") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! JSONDecoder().decode(BeEchoCodableRequest.self, from: data)
            let response = self._beEcho(msg.arg0)
            let boxedResponse = BeEchoCodableResponse(response: response)
            // swiftlint:disable:next force_try
            return try! JSONEncoder().encode(boxedResponse)
        }
    }
}

extension MultiEchoB {

    struct BeEchoCodableResponse: Codable {
        let response: String
    }
    struct BeEchoCodableRequest: Codable {
        let arg0: String
    }

    @discardableResult
    public func beEcho(_ string: String,
                       _ sender: Actor,
                       _ callback: @escaping (String) -> Void ) -> Self {
        let msg = BeEchoCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! JSONEncoder().encode(msg)
        unsafeSendToRemote("MultiEchoB", "beEcho", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! JSONDecoder().decode(BeEchoCodableResponse.self, from: $0).response)
            )
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("beEcho") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! JSONDecoder().decode(BeEchoCodableRequest.self, from: data)
            let response = self._beEcho(msg.arg0)
            let boxedResponse = BeEchoCodableResponse(response: response)
            // swiftlint:disable:next force_try
            return try! JSONEncoder().encode(boxedResponse)
        }
    }
}

extension MultiEchoA {

    struct BeEchoCodableResponse: Codable {
        let response: String
    }
    struct BeEchoCodableRequest: Codable {
        let arg0: String
    }

    @discardableResult
    public func beEcho(_ string: String,
                       _ sender: Actor,
                       _ callback: @escaping (String) -> Void ) -> Self {
        let msg = BeEchoCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! JSONEncoder().encode(msg)
        unsafeSendToRemote("MultiEchoA", "beEcho", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! JSONDecoder().decode(BeEchoCodableResponse.self, from: $0).response)
            )
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("beEcho") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! JSONDecoder().decode(BeEchoCodableRequest.self, from: data)
            let response = self._beEcho(msg.arg0)
            let boxedResponse = BeEchoCodableResponse(response: response)
            // swiftlint:disable:next force_try
            return try! JSONEncoder().encode(boxedResponse)
        }
    }
}
