import XCTest
@testable import Flynn

class MultiEchoA: RemoteActor {
    private func _beEcho(_ string: String) -> String {
        return "[A] " + string
    }
}

class MultiEchoB: RemoteActor {
    private func _beEcho(_ string: String) -> String {
        return "[B] " + string
    }
}

class MultiEchoC: RemoteActor {
    private func _beEcho(_ string: String) -> String {
        return "[C] " + string
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

import BinaryCodable

extension MultiEchoC {

    struct BeEchoCodableResponse: BinaryEncodable, BinaryDecodable {
        let response: String

        init(response: String) {
            self.response = response
        }

        func encode(to encoder: BinaryEncoder) throws {
            var container = encoder.container()
            try container.encode(response, encoding: .utf8, terminator: 0)
        }

        init(from decoder: BinaryDecoder) throws {
            var container = decoder.container(maxLength: nil)
            response = try container.decodeString(encoding: .utf8, terminator: 0)
        }
    }
    struct BeEchoCodableRequest: BinaryEncodable, BinaryDecodable {
        let arg0: String

        init(arg0: String) {
            self.arg0 = arg0
        }

        func encode(to encoder: BinaryEncoder) throws {
            var container = encoder.container()
            try container.encode(arg0, encoding: .utf8, terminator: 0)
        }

        init(from decoder: BinaryDecoder) throws {
            var container = decoder.container(maxLength: nil)
            arg0 = try container.decodeString(encoding: .utf8, terminator: 0)
        }
    }

    @discardableResult
    public func beEcho(_ string: String,
                       _ sender: Actor,
                       _ callback: @escaping (String) -> Void ) -> Self {
        let msg = BeEchoCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! BinaryDataEncoder().encode(msg)
        unsafeSendToRemote("MultiEchoC", "beEcho", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! BinaryDataDecoder().decode(BeEchoCodableResponse.self, from: $0).response)
            )
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("beEcho") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! BinaryDataDecoder().decode(BeEchoCodableRequest.self, from: data)
            let response = self._beEcho(msg.arg0)
            let boxedResponse = BeEchoCodableResponse(response: response)
            // swiftlint:disable:next force_try
            return try! BinaryDataEncoder().encode(boxedResponse)
        }
    }
}

extension MultiEchoB {

    struct BeEchoCodableResponse: BinaryEncodable, BinaryDecodable {
        let response: String

        init(response: String) {
            self.response = response
        }

        func encode(to encoder: BinaryEncoder) throws {
            var container = encoder.container()
            try container.encode(response, encoding: .utf8, terminator: 0)
        }

        init(from decoder: BinaryDecoder) throws {
            var container = decoder.container(maxLength: nil)
            response = try container.decodeString(encoding: .utf8, terminator: 0)
        }
    }
    struct BeEchoCodableRequest: BinaryEncodable, BinaryDecodable {
        let arg0: String

        init(arg0: String) {
            self.arg0 = arg0
        }

        func encode(to encoder: BinaryEncoder) throws {
            var container = encoder.container()
            try container.encode(arg0, encoding: .utf8, terminator: 0)
        }

        init(from decoder: BinaryDecoder) throws {
            var container = decoder.container(maxLength: nil)
            arg0 = try container.decodeString(encoding: .utf8, terminator: 0)
        }
    }

    @discardableResult
    public func beEcho(_ string: String,
                       _ sender: Actor,
                       _ callback: @escaping (String) -> Void ) -> Self {
        let msg = BeEchoCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! BinaryDataEncoder().encode(msg)
        unsafeSendToRemote("MultiEchoB", "beEcho", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! BinaryDataDecoder().decode(BeEchoCodableResponse.self, from: $0).response)
            )
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("beEcho") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! BinaryDataDecoder().decode(BeEchoCodableRequest.self, from: data)
            let response = self._beEcho(msg.arg0)
            let boxedResponse = BeEchoCodableResponse(response: response)
            // swiftlint:disable:next force_try
            return try! BinaryDataEncoder().encode(boxedResponse)
        }
    }
}

extension MultiEchoA {

    struct BeEchoCodableResponse: BinaryEncodable, BinaryDecodable {
        let response: String

        init(response: String) {
            self.response = response
        }

        func encode(to encoder: BinaryEncoder) throws {
            var container = encoder.container()
            try container.encode(response, encoding: .utf8, terminator: 0)
        }

        init(from decoder: BinaryDecoder) throws {
            var container = decoder.container(maxLength: nil)
            response = try container.decodeString(encoding: .utf8, terminator: 0)
        }
    }
    struct BeEchoCodableRequest: BinaryEncodable, BinaryDecodable {
        let arg0: String

        init(arg0: String) {
            self.arg0 = arg0
        }

        func encode(to encoder: BinaryEncoder) throws {
            var container = encoder.container()
            try container.encode(arg0, encoding: .utf8, terminator: 0)
        }

        init(from decoder: BinaryDecoder) throws {
            var container = decoder.container(maxLength: nil)
            arg0 = try container.decodeString(encoding: .utf8, terminator: 0)
        }
    }

    @discardableResult
    public func beEcho(_ string: String,
                       _ sender: Actor,
                       _ callback: @escaping (String) -> Void ) -> Self {
        let msg = BeEchoCodableRequest(arg0: string)
        // swiftlint:disable:next force_try
        let data = try! BinaryDataEncoder().encode(msg)
        unsafeSendToRemote("MultiEchoA", "beEcho", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! BinaryDataDecoder().decode(BeEchoCodableResponse.self, from: $0).response)
            )
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("beEcho") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! BinaryDataDecoder().decode(BeEchoCodableRequest.self, from: data)
            let response = self._beEcho(msg.arg0)
            let boxedResponse = BeEchoCodableResponse(response: response)
            // swiftlint:disable:next force_try
            return try! BinaryDataEncoder().encode(boxedResponse)
        }
    }
}
