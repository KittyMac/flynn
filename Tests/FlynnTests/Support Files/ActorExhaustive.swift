import XCTest
@testable import Flynn

// swiftlint:disable line_length

// The only purpose of this file is to have one of all combinations of remote
// behaviors to help ensure flynnlint generates them all correctly
class ActorExhaustive: Actor {
    private func _beNoArgsNoReturn() { }
    private func _beNoArgsVoidReturn() { }
    private func _beNoArgsOneReturn() -> Int { return 0 }

    private func _beOneArgNoReturn(_ arg0: Int) { }
    private func _beOneArgOneReturn(_ arg0: Int) -> Int { return arg0 }

    private func _beTwoArgsNoReturn(_ arg0: Int, _ arg1: String?) { }
    private func _beTwoArgsOptionalReturn(_ arg0: Int, _ arg1: String?) -> String? { return arg1 }

    // adding a returnCallback to your behavior signals FlynnLint that this
    // behavior you want to be able to respond to at some point in the future
    // (and not with a direct return value). Simply including this parameter
    // as the last parameter to the behavior is enough to let FlynnLint know
    // what to do.
    private func _beNoArgsDelayedReturn(_ returnCallback: (String) -> Void) { returnCallback("Hello World") }
    private func _beOneArgDelayedReturn(_ string: String, _ returnCallback: (String) -> Void) { returnCallback(string) }

    private func _beNoArgsTwoDelayedReturn(_ returnCallback: (String, Int) -> Void) { returnCallback("Hello World", 42) }
    private func _beOneArgTwoDelayedReturn(_ string: String, _ returnCallback: (String, Int) -> Void) { returnCallback(string, 42) }

}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension ActorExhaustive {

    @discardableResult
    public func beNoArgsNoReturn() -> Self {
        unsafeSend(_beNoArgsNoReturn)
        return self
    }
    @discardableResult
    public func beNoArgsVoidReturn() -> Self {
        unsafeSend(_beNoArgsVoidReturn)
        return self
    }
    @discardableResult
    public func beNoArgsOneReturn(_ sender: Actor,
                                  _ callback: @escaping ((Int) -> Void)) -> Self {
        unsafeSend { [weak self] in
            let result = self!._beNoArgsOneReturn()
            sender.unsafeSend { callback(result) }
        }
        return self
    }
    @discardableResult
    public func beOneArgNoReturn(_ arg0: Int) -> Self {
        unsafeSend { [weak self] in self!._beOneArgNoReturn(arg0) }
        return self
    }
    @discardableResult
    public func beOneArgOneReturn(_ arg0: Int,
                                  _ sender: Actor,
                                  _ callback: @escaping ((Int) -> Void)) -> Self {
        unsafeSend { [weak self] in
            let result = self!._beOneArgOneReturn(arg0)
            sender.unsafeSend { callback(result) }
        }
        return self
    }
    @discardableResult
    public func beTwoArgsNoReturn(_ arg0: Int,
                                  _ arg1: String?) -> Self {
        unsafeSend { [weak self] in self!._beTwoArgsNoReturn(arg0, arg1) }
        return self
    }
    @discardableResult
    public func beTwoArgsOptionalReturn(_ arg0: Int,
                                        _ arg1: String?,
                                        _ sender: Actor,
                                        _ callback: @escaping ((String?) -> Void)) -> Self {
        unsafeSend { [weak self] in
            let result = self!._beTwoArgsOptionalReturn(arg0, arg1)
            sender.unsafeSend { callback(result) }
        }
        return self
    }
    @discardableResult
    public func beNoArgsDelayedReturn(_ sender: Actor,
                                      _ callback: @escaping ((String) -> Void)) -> Self {
        unsafeSend { [weak self] in
            self!._beNoArgsDelayedReturn { arg0 in
                sender.unsafeSend {
                    callback(arg0)
                }
            }
        }
        return self
    }
    @discardableResult
    public func beOneArgDelayedReturn(_ string: String,
                                      _ sender: Actor,
                                      _ callback: @escaping ((String) -> Void)) -> Self {
        unsafeSend { [weak self] in
            self!._beOneArgDelayedReturn(string) { arg0 in
                sender.unsafeSend {
                    callback(arg0)
                }
            }
        }
        return self
    }
    @discardableResult
    public func beNoArgsTwoDelayedReturn(_ sender: Actor,
                                         _ callback: @escaping ((String, Int) -> Void)) -> Self {
        unsafeSend { [weak self] in
            self!._beNoArgsTwoDelayedReturn { arg0, arg1 in
                sender.unsafeSend {
                    callback(arg0, arg1)
                }
            }
        }
        return self
    }
    @discardableResult
    public func beOneArgTwoDelayedReturn(_ string: String,
                                         _ sender: Actor,
                                         _ callback: @escaping ((String, Int) -> Void)) -> Self {
        unsafeSend { [weak self] in
            self!._beOneArgTwoDelayedReturn(string) { arg0, arg1 in
                sender.unsafeSend {
                    callback(arg0, arg1)
                }
            }
        }
        return self
    }

}
