import Flynn
import Foundation

public class RemoteCounter: RemoteActor {
    private var count: Int = 0

    private func _beIncrement(_ amount: Int) -> Data {
        for _ in 0..<amount {
            count += 1
        }
        return Data(bytes: &count, count: MemoryLayout.size(ofValue: count))
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension RemoteCounter {

    struct BeIncrementCodable: Codable {
        let arg0: Int
    }

    @discardableResult
    public func beIncrement(_ amount: Int,
                            _ sender: Actor,
                            _ callback: @escaping RemoteBehaviorReply ) -> Self {
        let msg = BeIncrementCodable(arg0: amount)
        if let data = try? JSONEncoder().encode(msg) {
            unsafeSendToRemote("RemoteCounter", "beIncrement", data, sender, callback)
        } else {
            fatalError()
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("beIncrement") { [unowned self] (data) in
            if let msg = try? JSONDecoder().decode(BeIncrementCodable.self, from: data) {
                return self._beIncrement(msg.arg0)
            }
            return nil
        }
    }
}
