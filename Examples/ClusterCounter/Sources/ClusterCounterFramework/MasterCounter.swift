import Flynn
import Foundation

public class MasterCounter: Actor {
    private var total: Int = 0
    private var remotes: [RemoteCounter] = []

    public override init() {
        super.init()

        Flynn.Timer(timeInterval: 1.0, repeats: true, self) { (_) in
            self.total = 0

            for idx in 0..<Flynn.remoteCores {
                var counter: RemoteCounter?
                if idx < self.remotes.count {
                    counter = self.remotes[idx]
                } else {
                    counter = RemoteCounter()
                    self.remotes.append(counter!)
                }

                if let counter = counter {
                    counter.beIncrement(10, self) {
                        self.total += $0.withUnsafeBytes { $0.load(as: Int.self) }
                    }
                }
            }

        }
    }

    private func _beGetTotal() -> Int {
        return total
    }

}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension MasterCounter {

    @discardableResult
    public func beGetTotal(_ sender: Actor,
                           _ callback: @escaping ((Int) -> Void)) -> Self {
        unsafeSend {
            let result = self._beGetTotal()
            sender.unsafeSend { callback(result) }
        }
        return self
    }

}
