import Flynn
import Foundation

public class MasterCounter: Actor {
    private var total: Int = 0
    private var remotes: [RemoteCounter] = []

    public override init() {
        super.init()

        Flynn.Timer(timeInterval: 1.0, repeats: true, self) { (_) in
            self.total = 0

            // send to all existing remotes
            for counter in self.remotes {
                counter.beIncrement(10, self) {
                    self.total += $0.withUnsafeBytes { $0.load(as: Int.self) }
                }
            }

            // remove any RemoteCounters who are no longer connected
            self.remotes.removeAll { $0.unsafeIsConnected() == false }

            // add new remote counters until we saturate all of the remote cores
            for _ in self.remotes.count..<Flynn.remoteCores {
                self.remotes.append(RemoteCounter())
            }

        }
    }

    private func _beGetTotal() -> Int {
        return total
    }

}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension MasterCounter {

    @discardableResult
    public func beGetTotal(_ sender: Actor,
                           _ callback: @escaping ((Int) -> Void)) -> Self {
        unsafeSend {
            let result = self._beGetTotal()
            sender.unsafeSend { callback(result) }
        }
        return self
    }

}
