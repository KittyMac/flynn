import Flynn
import Foundation
import LzSwift

public class Support: RemoteActor {
    private func _beArchive(_ data: Data) -> Data {
        if data.isLzipped {
            if let uncompressed = try? data.lunzipped() {
                return uncompressed
            }
        } else {
            if let compressed = try? data.lzipped(level: .lvl6) {
                return compressed
            }
        }
        return Data()
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Support {

    struct BeArchiveCodableResponse: Codable {
        let response: Data
    }
    struct BeArchiveCodableRequest: Codable {
        let arg0: Data
    }

    @discardableResult
    public func beArchive(_ data: Data,
                          _ sender: Actor,
                          _ callback: @escaping (Data) -> Void ) -> Self {
        let msg = BeArchiveCodableRequest(arg0: data)
        // swiftlint:disable:next force_try
        let data = try! JSONEncoder().encode(msg)
        unsafeSendToRemote("Support", "beArchive", data, sender) {
            callback(
                // swiftlint:disable:next force_try
                (try! JSONDecoder().decode(BeArchiveCodableResponse.self, from: $0).response)
            )
        }
        return self
    }

    public func unsafeRegisterAllBehaviors() {
        safeRegisterRemoteBehavior("beArchive") { [unowned self] (data) in
            // swiftlint:disable:next force_try
            let msg = try! JSONDecoder().decode(BeArchiveCodableRequest.self, from: data)
            let response = self._beArchive(msg.arg0)
            let boxedResponse = BeArchiveCodableResponse(response: response)
            // swiftlint:disable:next force_try
            return try! JSONEncoder().encode(boxedResponse)
        }
    }
}
